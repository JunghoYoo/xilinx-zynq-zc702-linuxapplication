###################################################################
##
## Name     : axi_i2s_adi
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_i2s_adi

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = AXI_I2S_ADI
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S_AXIS_MM2S, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_DMA_TYPE == 0)
BUS_INTERFACE BUS = M_AXIS_S2MM, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_DMA_TYPE == 0)

IO_INTERFACE IO_IF = DMA_REQ_TX, IO_TYPE = XIL_DMA_REQ_V1, ISVALID = (C_DMA_TYPE == 1 && C_HAS_TX == 1)
IO_INTERFACE IO_IF = DMA_REQ_RX, IO_TYPE = XIL_DMA_REQ_V1, ISVALID = (C_DMA_TYPE == 1 && C_HAS_RX == 1)

IO_INTERFACE IO_IF = I2S, IO_TYPE = I2S

## Generics for VHDL or Parameters for Verilog
PARAMETER C_SLOT_WIDTH = 24, DT = INTEGER
PARAMETER C_LRCLK_POL = 0, DT = INTEGER
PARAMETER C_BCLK_POL = 0, DT = INTEGER

PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_S_AXIS_MM2S_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = S_AXIS_MM2S, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXIS_S2MM_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = M_AXIS_S2MM, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

PARAMETER C_DMA_TYPE = 0, DT = INTEGER, RANGE = (0,1)

PARAMETER C_NUM_CH = 1, DT = INTEGER
PARAMETER C_HAS_TX = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_HAS_RX = 1, DT = INTEGER, RANGE = (0,1)

## Ports
PORT DATA_CLK_I = "", DIR=I, SIGIS=CLK

# I2S interface
PORT BCLK_O = "", DIR = O, IO_IF=I2S, VEC = [C_NUM_CH-1:0]
PORT LRCLK_O = "", DIR = O, IO_IF=I2S, VEC = [C_NUM_CH-1:0]
PORT SDATA_O = "", DIR = O, IO_IF=I2S, VEC = [C_NUM_CH-1:0], ISVALID = (C_HAS_TX == 1)
PORT SDATA_I = "", DIR = I, IO_IF=I2S, VEC = [C_NUM_CH-1:0], ISVALID = (C_HAS_RX == 1)

## AXI Streaming interface ports
## TX
PORT S_AXIS_ACLK = "", DIR=I, SIGIS=CLK, BUS=S_AXIS_MM2S, ISVALID = (C_DMA_TYPE == 0)
PORT S_AXIS_ARESETN = ARESETN, DIR=I, BUS=S_AXIS_MM2S, ISVALID = (C_DMA_TYPE == 0)
PORT S_AXIS_TREADY = TREADY, DIR=O, BUS=S_AXIS_MM2S, ISVALID = (C_DMA_TYPE == 0)
PORT S_AXIS_TDATA = TDATA, DIR=I, VEC=[31:0], BUS=S_AXIS_MM2S, ISVALID = (C_DMA_TYPE == 0)
PORT S_AXIS_TLAST = TLAST, DIR=I, BUS=S_AXIS_MM2S, ISVALID = (C_DMA_TYPE == 0)
PORT S_AXIS_TVALID = TVALID, DIR=I, BUS=S_AXIS_MM2S, ISVALID = (C_DMA_TYPE == 0)
## RX
PORT M_AXIS_ACLK = "", DIR = I, SIGIS = CLK, BUS = M_AXIS_S2MM, ISVALID = (C_DMA_TYPE == 0)
PORT M_AXIS_TVALID = TVALID, DIR = O, BUS = M_AXIS_S2MM, ISVALID = (C_DMA_TYPE == 0)
PORT M_AXIS_TDATA = TDATA, DIR = O, VEC = [31:0], BUS = M_AXIS_S2MM, ISVALID = (C_DMA_TYPE == 0)
PORT M_AXIS_TLAST = TLAST, DIR = O, BUS = M_AXIS_S2MM, ISVALID = (C_DMA_TYPE == 0)
PORT M_AXIS_TREADY = TREADY, DIR = I, BUS = M_AXIS_S2MM, ISVALID = (C_DMA_TYPE == 0)
PORT M_AXIS_TKEEP = TKEEP, DIR = O, VEC = [3:0], BUS = M_AXIS_S2MM, ISVALID = (C_DMA_TYPE == 0)

PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI 
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

## PL330 DMA interface
PORT DMA_REQ_TX_ACLK = "", DIR = I, SIGIS=CLK, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_RSTN = "", DIR = I, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DAVALID = "", DIR = I, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DATYPE = "", DIR = I, IO_IF=DMA_REQ_TX, VEC = [1:0], ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DRREADY = "", DIR = I, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DRVALID = "", DIR = O, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DRTYPE = "", DIR = O, IO_IF=DMA_REQ_TX, VEC = [1:0], ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DRLAST = "", DIR = O, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_TX_DAREADY = "", DIR = O, IO_IF=DMA_REQ_TX, ISVALID = (C_DMA_TYPE == 1)

PORT DMA_REQ_RX_ACLK = "", DIR = I, SIGIS=CLK, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_RSTN = "", DIR = I, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DAVALID = "", DIR = I, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DATYPE = "", DIR = I, IO_IF=DMA_REQ_RX, VEC = [1:0], ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DRREADY = "", DIR = I, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DRVALID = "", DIR = O, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DRTYPE = "", DIR = O, IO_IF=DMA_REQ_RX, VEC = [1:0], ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DRLAST = "", DIR = O, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)
PORT DMA_REQ_RX_DAREADY = "", DIR = O, IO_IF=DMA_REQ_RX, ISVALID = (C_DMA_TYPE == 1)

END
