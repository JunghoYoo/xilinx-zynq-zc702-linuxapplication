// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\Update_Count_From_AB.v
// Created: 2014-09-08 14:12:09
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Update_Count_From_AB
// Source Path: controllerPeripheralHdlAdi/Encoder_Peripheral_Hardware_Specification/Update_Count_From_AB
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Update_Count_From_AB
          (
           CLK_IN,
           reset,
           enb,
           A,
           B,
           index,
           count_max,
           count
          );


  input   CLK_IN;
  input   reset;
  input   enb;
  input   A;
  input   B;
  input   index;
  input   signed [15:0] count_max;  // int16
  output  signed [15:0] count;  // int16

  parameter IN_NO_ACTIVE_CHILD = 0, IN_A0_B0 = 1, IN_A0_B1 = 2, IN_A1_B0 = 3, IN_A1_B1 = 4;
  parameter IN_INDEX = 0, IN_INIT = 1;

  reg [1:0] is_libEncoderPeripheralHdl_c7_Update_Count_From_AB;  // uint8
  reg [2:0] is_INDEX;  // uint8
  reg signed [15:0] count_reg;  // int16
  reg [1:0] is_libEncoderPeripheralHdl_c7_Update_Count_From_AB_next;  // enumerated type (2 enums)
  reg [2:0] is_INDEX_next;  // enumerated type (5 enums)
  reg signed [15:0] count_reg_next;  // int16


  always @(posedge CLK_IN)
    begin : libEncoderPeripheralHdl_c7_Update_Count_From_AB_process
      if (reset == 1'b1) begin
        is_INDEX <= IN_NO_ACTIVE_CHILD;
        count_reg <= 16'sd0;
        //Entry: Encoder_Peripheral_Hardware_Specification/Update_Count_From_AB
        //Entry Internal: Encoder_Peripheral_Hardware_Specification/Update_Count_From_AB
        //Transition: '<S9>:30'
        is_libEncoderPeripheralHdl_c7_Update_Count_From_AB <= IN_INIT;
      end
      else if (enb) begin
        is_libEncoderPeripheralHdl_c7_Update_Count_From_AB <= is_libEncoderPeripheralHdl_c7_Update_Count_From_AB_next;
        is_INDEX <= is_INDEX_next;
        count_reg <= count_reg_next;
      end
    end

  always @(is_libEncoderPeripheralHdl_c7_Update_Count_From_AB, is_INDEX, A, B, index,
       count_max, count_reg) begin
    count_reg_next = count_reg;
    is_libEncoderPeripheralHdl_c7_Update_Count_From_AB_next = is_libEncoderPeripheralHdl_c7_Update_Count_From_AB;
    is_INDEX_next = is_INDEX;
    //Gateway: Encoder_Peripheral_Hardware_Specification/Update_Count_From_AB
    //During: Encoder_Peripheral_Hardware_Specification/Update_Count_From_AB

    case ( is_libEncoderPeripheralHdl_c7_Update_Count_From_AB)
      IN_INDEX :
        begin
          //During 'INDEX': '<S9>:29'
          if (index == 1'b1) begin
            //Transition: '<S9>:34'
            //Transition: '<S9>:35'
            count_reg_next = 16'sd0;
            //Transition: '<S9>:37'
            //Exit Internal 'INDEX': '<S9>:29'
            is_libEncoderPeripheralHdl_c7_Update_Count_From_AB_next = IN_INDEX;
            is_INDEX_next = IN_A0_B0;
          end
          else begin

            case ( is_INDEX)
              IN_A0_B0 :
                begin
                  //During 'A0_B0': '<S9>:1'
                  if (A && ( ~ B)) begin
                    //Transition: '<S9>:14'
                    //Graphical Function 'incrementCount': '<S9>:42'
                    //Transition: '<S9>:44'
                    count_reg_next = count_reg + 1;
                    if ((count_reg + 16'sd1) > count_max) begin
                      //Transition: '<S9>:46'
                      //Transition: '<S9>:48'
                      count_reg_next = 16'sd0;
                      //Transition: '<S9>:51'
                    end
                    else begin
                      //Transition: '<S9>:50'
                    end
                    //Transition: '<S9>:13'
                    is_INDEX_next = IN_A1_B0;
                  end
                  else if (( ~ A) && B) begin
                    //Transition: '<S9>:8'
                    //Graphical Function 'decrementCount': '<S9>:55'
                    //Transition: '<S9>:60'
                    count_reg_next = count_reg - 1;
                    if ((count_reg - 16'sd1) < 16'sb0000000000000000) begin
                      //Transition: '<S9>:61'
                      //Transition: '<S9>:63'
                      count_reg_next = count_max;
                      //Transition: '<S9>:64'
                    end
                    else begin
                      //Transition: '<S9>:62'
                    end
                    is_INDEX_next = IN_A0_B1;
                  end
                end
              IN_A0_B1 :
                begin
                  //During 'A0_B1': '<S9>:5'
                  if (A && B) begin
                    //Transition: '<S9>:10'
                    //Graphical Function 'decrementCount': '<S9>:55'
                    //Transition: '<S9>:60'
                    count_reg_next = count_reg - 1;
                    if ((count_reg - 16'sd1) < 16'sb0000000000000000) begin
                      //Transition: '<S9>:61'
                      //Transition: '<S9>:63'
                      count_reg_next = count_max;
                      //Transition: '<S9>:64'
                    end
                    else begin
                      //Transition: '<S9>:62'
                    end
                    is_INDEX_next = IN_A1_B1;
                  end
                  else begin
                    //Transition: '<S9>:16'
                    if (( ~ A) && ( ~ B)) begin
                      //Transition: '<S9>:17'
                      //Graphical Function 'incrementCount': '<S9>:42'
                      //Transition: '<S9>:44'
                      count_reg_next = count_reg + 1;
                      if ((count_reg + 16'sd1) > count_max) begin
                        //Transition: '<S9>:46'
                        //Transition: '<S9>:48'
                        count_reg_next = 16'sd0;
                        //Transition: '<S9>:51'
                      end
                      else begin
                        //Transition: '<S9>:50'
                      end
                      is_INDEX_next = IN_A0_B0;
                    end
                  end
                end
              IN_A1_B0 :
                begin
                  //During 'A1_B0': '<S9>:2'
                  if (( ~ A) && ( ~ B)) begin
                    //Transition: '<S9>:7'
                    //Graphical Function 'decrementCount': '<S9>:55'
                    //Transition: '<S9>:60'
                    count_reg_next = count_reg - 1;
                    if ((count_reg - 16'sd1) < 16'sb0000000000000000) begin
                      //Transition: '<S9>:61'
                      //Transition: '<S9>:63'
                      count_reg_next = count_max;
                      //Transition: '<S9>:64'
                    end
                    else begin
                      //Transition: '<S9>:62'
                    end
                    is_INDEX_next = IN_A0_B0;
                  end
                  else begin
                    //Transition: '<S9>:24'
                    if (A && B) begin
                      //Transition: '<S9>:25'
                      //Graphical Function 'incrementCount': '<S9>:42'
                      //Transition: '<S9>:44'
                      count_reg_next = count_reg + 1;
                      if ((count_reg + 16'sd1) > count_max) begin
                        //Transition: '<S9>:46'
                        //Transition: '<S9>:48'
                        count_reg_next = 16'sd0;
                        //Transition: '<S9>:51'
                      end
                      else begin
                        //Transition: '<S9>:50'
                      end
                      is_INDEX_next = IN_A1_B1;
                    end
                  end
                end
              default :
                begin
                  //During 'A1_B1': '<S9>:4'
                  if (( ~ A) && B) begin
                    //Transition: '<S9>:19'
                    //Graphical Function 'incrementCount': '<S9>:42'
                    //Transition: '<S9>:44'
                    count_reg_next = count_reg + 1;
                    if ((count_reg + 16'sd1) > count_max) begin
                      //Transition: '<S9>:46'
                      //Transition: '<S9>:48'
                      count_reg_next = 16'sd0;
                      //Transition: '<S9>:51'
                    end
                    else begin
                      //Transition: '<S9>:50'
                    end
                    //Transition: '<S9>:21'
                    is_INDEX_next = IN_A0_B1;
                  end
                  else if (A && ( ~ B)) begin
                    //Transition: '<S9>:22'
                    //Graphical Function 'decrementCount': '<S9>:55'
                    //Transition: '<S9>:60'
                    count_reg_next = count_reg - 1;
                    if ((count_reg - 16'sd1) < 16'sb0000000000000000) begin
                      //Transition: '<S9>:61'
                      //Transition: '<S9>:63'
                      count_reg_next = count_max;
                      //Transition: '<S9>:64'
                    end
                    else begin
                      //Transition: '<S9>:62'
                    end
                    is_INDEX_next = IN_A1_B0;
                  end
                end
            endcase

          end
        end
      default :
        begin
          //During 'INIT': '<S9>:68'
          //Transition: '<S9>:70'
          //Transition: '<S9>:35'
          count_reg_next = 16'sd0;
          //Transition: '<S9>:37'
          is_libEncoderPeripheralHdl_c7_Update_Count_From_AB_next = IN_INDEX;
          is_INDEX_next = IN_A0_B0;
        end
    endcase

  end

  assign count = count_reg_next;



endmodule  // Update_Count_From_AB

