// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\velocityControlHdl\velocityControlHdl_Inverse_Park_Transform.v
// Created: 2014-08-25 21:11:09
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: velocityControlHdl_Inverse_Park_Transform
// Source Path: velocityControlHdl/Transform_dq_to_ABC/Inverse_Park_Transform
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module velocityControlHdl_Inverse_Park_Transform
          (
           direct_voltage,
           quadrature_voltage,
           sin_coefficient,
           cos_coefficient,
           alpha_voltage,
           beta_voltage
          );


  input   signed [17:0] direct_voltage;  // sfix18_En12
  input   signed [17:0] quadrature_voltage;  // sfix18_En12
  input   signed [17:0] sin_coefficient;  // sfix18_En16
  input   signed [17:0] cos_coefficient;  // sfix18_En16
  output  signed [17:0] alpha_voltage;  // sfix18_En10
  output  signed [17:0] beta_voltage;  // sfix18_En10


  wire signed [35:0] Product2_out1;  // sfix36_En28
  wire signed [35:0] Product3_out1;  // sfix36_En28
  wire signed [35:0] alpha_voltage_1;  // sfix36_En28
  wire signed [17:0] Convert_Data_Type_out1;  // sfix18_En10
  wire signed [35:0] Product_out1;  // sfix36_En28
  wire signed [35:0] Product1_out1;  // sfix36_En28
  wire signed [35:0] beta_voltage_1;  // sfix36_En28
  wire signed [17:0] Convert_Data_Type1_out1;  // sfix18_En10

  // Converts orthogonal rotating reference frame (dq) to two-phase orthogonal stationary reference frame (alpha, beta)
  // 
  // Inverse Park Transform


  // <S44>/Product2
  assign Product2_out1 = direct_voltage * cos_coefficient;



  // <S44>/Product3
  assign Product3_out1 = quadrature_voltage * sin_coefficient;



  // <S44>/Add1
  assign alpha_voltage_1 = Product2_out1 - Product3_out1;



  // <S44>/Convert_Data_Type
  velocityControlHdl_Convert_Data_Type_block1   u_Convert_Data_Type   (.In1(alpha_voltage_1),  // sfix36_En28
                                                                       .Out1(Convert_Data_Type_out1)  // sfix18_En10
                                                                       );

  assign alpha_voltage = Convert_Data_Type_out1;

  // <S44>/Product
  assign Product_out1 = direct_voltage * sin_coefficient;



  // <S44>/Product1
  assign Product1_out1 = quadrature_voltage * cos_coefficient;



  // <S44>/Add
  assign beta_voltage_1 = Product_out1 + Product1_out1;



  // <S44>/Convert_Data_Type1
  velocityControlHdl_Convert_Data_Type1_block1   u_Convert_Data_Type1   (.In1(beta_voltage_1),  // sfix36_En28
                                                                         .Out1(Convert_Data_Type1_out1)  // sfix18_En10
                                                                         );

  assign beta_voltage = Convert_Data_Type1_out1;

endmodule  // velocityControlHdl_Inverse_Park_Transform

