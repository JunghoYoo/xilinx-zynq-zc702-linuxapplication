// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\velocityControlHdl\velocityControlHdl_velocityControlHdl.v
// Created: 2014-08-25 21:11:09
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: velocityControlHdl_velocityControlHdl
// Source Path: velocityControlHdl
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module velocityControlHdl_velocityControlHdl
          (
           CLK_IN,
           reset,
           enb_1_2000_0,
           reset_1,
           command,
           measured,
           phase_currents_0,
           phase_currents_1,
           electrical_position,
           param_velocity_p_gain,
           param_velocity_i_gain,
           param_current_p_gain,
           param_current_i_gain,
           phase_voltages_0,
           phase_voltages_1,
           phase_voltages_2,
           dq_currents_0,
           dq_currents_1
          );


  input   CLK_IN;
  input   reset;
  input   enb_1_2000_0;
  input   reset_1;
  input   signed [17:0] command;  // sfix18_En8
  input   signed [17:0] measured;  // sfix18_En8
  input   signed [17:0] phase_currents_0;  // sfix18_En15
  input   signed [17:0] phase_currents_1;  // sfix18_En15
  input   signed [17:0] electrical_position;  // sfix18_En14
  input   signed [17:0] param_velocity_p_gain;  // sfix18_En16
  input   signed [17:0] param_velocity_i_gain;  // sfix18_En15
  input   signed [17:0] param_current_p_gain;  // sfix18_En10
  input   signed [17:0] param_current_i_gain;  // sfix18_En2
  output  signed [19:0] phase_voltages_0;  // sfix20_En12
  output  signed [19:0] phase_voltages_1;  // sfix20_En12
  output  signed [19:0] phase_voltages_2;  // sfix20_En12
  output  signed [17:0] dq_currents_0;  // sfix18_En15
  output  signed [17:0] dq_currents_1;  // sfix18_En15


  wire signed [17:0] Control_Velocity_out1;  // sfix18_En15
  wire signed [17:0] sin_coefficient;  // sfix18_En16
  wire signed [17:0] cos_coefficient;  // sfix18_En16
  wire signed [17:0] d_current;  // sfix18_En15
  wire signed [17:0] q_current;  // sfix18_En15
  wire signed [17:0] d_voltage;  // sfix18_En12
  wire signed [17:0] q_voltage;  // sfix18_En12
  wire signed [17:0] Transform_dq_to_ABC_out1_0;  // sfix18_En13
  wire signed [17:0] Transform_dq_to_ABC_out1_1;  // sfix18_En13
  wire signed [17:0] Transform_dq_to_ABC_out1_2;  // sfix18_En13
  wire signed [19:0] Space_Vector_Modulation_out1_0;  // sfix20_En12
  wire signed [19:0] Space_Vector_Modulation_out1_1;  // sfix20_En12
  wire signed [19:0] Space_Vector_Modulation_out1_2;  // sfix20_En12

  // Velocity Control HDL
  // 
  // Outer velocity control with inner loop current control.


  // <Root>/Control_Velocity
  velocityControlHdl_Control_Velocity   u_Control_Velocity   (.CLK_IN(CLK_IN),
                                                              .reset(reset),
                                                              .enb_1_2000_0(enb_1_2000_0),
                                                              .Reset_1(reset_1),
                                                              .velocity_command(command),  // sfix18_En8
                                                              .velocity_measured(measured),  // sfix18_En8
                                                              .param_velocity_p_gain(param_velocity_p_gain),  // sfix18_En16
                                                              .param_velocity_i_gain(param_velocity_i_gain),  // sfix18_En15
                                                              .q_command(Control_Velocity_out1)  // sfix18_En15
                                                              );

  // <Root>/Sin_Cos1
  velocityControlHdl_Sin_Cos1   u_Sin_Cos1   (.x(electrical_position),  // sfix18_En14
                                              .sin(sin_coefficient),  // sfix18_En16
                                              .cos(cos_coefficient)  // sfix18_En16
                                              );

  // <Root>/Transform_ABC_to_dq
  // 
  // <Root>/Mux
  velocityControlHdl_Transform_ABC_to_dq   u_Transform_ABC_to_dq   (.phase_currents_0(phase_currents_0),  // sfix18_En15
                                                                    .phase_currents_1(phase_currents_1),  // sfix18_En15
                                                                    .sin_coefficient(sin_coefficient),  // sfix18_En16
                                                                    .cos_coefficient(cos_coefficient),  // sfix18_En16
                                                                    .d_current(d_current),  // sfix18_En15
                                                                    .q_current(q_current)  // sfix18_En15
                                                                    );

  // Linear Current Controllers
  // 
  // PID Blocks used for Control Design of Current Loop controllers.
  // 
  // <Root>/Control_DQ_Currents
  velocityControlHdl_Control_DQ_Currents   u_Control_DQ_Currents   (.CLK_IN(CLK_IN),
                                                                    .reset(reset),
                                                                    .enb_1_2000_0(enb_1_2000_0),
                                                                    .Reset_1(reset_1),
                                                                    .q_current_command(Control_Velocity_out1),  // sfix18_En15
                                                                    .d_current_measured(d_current),  // sfix18_En15
                                                                    .q_current_measured(q_current),  // sfix18_En15
                                                                    .param_current_p_gain(param_current_p_gain),  // sfix18_En10
                                                                    .param_current_i_gain(param_current_i_gain),  // sfix18_En2
                                                                    .d_voltage(d_voltage),  // sfix18_En12
                                                                    .q_voltage(q_voltage)  // sfix18_En12
                                                                    );

  // <Root>/Transform_dq_to_ABC
  velocityControlHdl_Transform_dq_to_ABC   u_Transform_dq_to_ABC   (.d(d_voltage),  // sfix18_En12
                                                                    .q(q_voltage),  // sfix18_En12
                                                                    .sin(sin_coefficient),  // sfix18_En16
                                                                    .cos(cos_coefficient),  // sfix18_En16
                                                                    .ABC_0(Transform_dq_to_ABC_out1_0),  // sfix18_En13
                                                                    .ABC_1(Transform_dq_to_ABC_out1_1),  // sfix18_En13
                                                                    .ABC_2(Transform_dq_to_ABC_out1_2)  // sfix18_En13
                                                                    );

  // <Root>/Space_Vector_Modulation
  velocityControlHdl_Space_Vector_Modulation   u_Space_Vector_Modulation   (.Vabc_Raw_0(Transform_dq_to_ABC_out1_0),  // sfix18_En13
                                                                            .Vabc_Raw_1(Transform_dq_to_ABC_out1_1),  // sfix18_En13
                                                                            .Vabc_Raw_2(Transform_dq_to_ABC_out1_2),  // sfix18_En13
                                                                            .phase_voltages_0(Space_Vector_Modulation_out1_0),  // sfix20_En12
                                                                            .phase_voltages_1(Space_Vector_Modulation_out1_1),  // sfix20_En12
                                                                            .phase_voltages_2(Space_Vector_Modulation_out1_2)  // sfix20_En12
                                                                            );

  assign phase_voltages_0 = Space_Vector_Modulation_out1_0;

  assign phase_voltages_1 = Space_Vector_Modulation_out1_1;

  assign phase_voltages_2 = Space_Vector_Modulation_out1_2;

  assign dq_currents_0 = d_current;

  assign dq_currents_1 = q_current;

endmodule  // velocityControlHdl_velocityControlHdl

