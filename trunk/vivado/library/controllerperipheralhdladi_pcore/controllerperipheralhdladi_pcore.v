// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\controllerperipheralhdladi_pcore.v
// Created: 2014-08-28 10:14:05
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: controllerperipheralhdladi_pcore
// Source Path: controllerperipheralhdladi_pcore
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module controllerperipheralhdladi_pcore
          (
           IPCORE_CLK,
           IPCORE_RESETN,
           adc_current1,
           adc_current2,
           encoder_a,
           encoder_b,
           encoder_index,
           s_axi_aclk,
           s_axi_aresetn,
           s_axi_awaddr,
           s_axi_awvalid,
           s_axi_wdata,
           s_axi_wstrb,
           s_axi_wvalid,
           s_axi_bready,
           s_axi_araddr,
           s_axi_arvalid,
           s_axi_rready,
           pwm_a,
           pwm_b,
           pwm_c,
           mon_phase_voltage_a,
           mon_phase_voltage_b,
           mon_phase_current_a,
           mon_phase_current_b,
           mon_rotor_position,
           mon_electrical_position,
           mon_rotor_velocity,
           mon_d_current,
           mon_q_current,
           s_axi_awready,
           s_axi_wready,
           s_axi_bresp,
           s_axi_bvalid,
           s_axi_arready,
           s_axi_rdata,
           s_axi_rresp,
           s_axi_rvalid
          );

          parameter C_BASEADDR = 32'h00000000;
          parameter C_HIGHADDR = 32'hffffffff;

  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   [17:0] adc_current1;  // ufix18
  input   [17:0] adc_current2;  // ufix18
  input   encoder_a;  // ufix1
  input   encoder_b;  // ufix1
  input   encoder_index;  // ufix1
  input   s_axi_aclk;  // ufix1
  input   s_axi_aresetn;  // ufix1
  input   [31:0] s_axi_awaddr;  // ufix32
  input   s_axi_awvalid;  // ufix1
  input   [31:0] s_axi_wdata;  // ufix32
  input   [3:0] s_axi_wstrb;  // ufix4
  input   s_axi_wvalid;  // ufix1
  input   s_axi_bready;  // ufix1
  input   [31:0] s_axi_araddr;  // ufix32
  input   s_axi_arvalid;  // ufix1
  input   s_axi_rready;  // ufix1
  output  pwm_a;  // ufix1
  output  pwm_b;  // ufix1
  output  pwm_c;  // ufix1
  output  [31:0] mon_phase_voltage_a;  // ufix32
  output  [31:0] mon_phase_voltage_b;  // ufix32
  output  [31:0] mon_phase_current_a;  // ufix32
  output  [31:0] mon_phase_current_b;  // ufix32
  output  [31:0] mon_rotor_position;  // ufix32
  output  [31:0] mon_electrical_position;  // ufix32
  output  [31:0] mon_rotor_velocity;  // ufix32
  output  [31:0] mon_d_current;  // ufix32
  output  [31:0] mon_q_current;  // ufix32
  output  s_axi_awready;  // ufix1
  output  s_axi_wready;  // ufix1
  output  [1:0] s_axi_bresp;  // ufix2
  output  s_axi_bvalid;  // ufix1
  output  s_axi_arready;  // ufix1
  output  [31:0] s_axi_rdata;  // ufix32
  output  [1:0] s_axi_rresp;  // ufix2
  output  s_axi_rvalid;  // ufix1


  wire reset;
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire signed [18:0] axi_electrical_pos_err_sig;  // sfix19_En14
  wire dut_enable;  // ufix1
  wire [1:0] axi_controller_mode_sig;  // ufix2
  wire signed [17:0] axi_command_sig;  // sfix18_En8
  wire signed [17:0] axi_velocity_p_gain_sig;  // sfix18_En16
  wire signed [17:0] axi_velocity_i_gain_sig;  // sfix18_En15
  wire signed [17:0] axi_current_p_gain_sig;  // sfix18_En10
  wire signed [17:0] axi_current_i_gain_sig;  // sfix18_En2
  wire signed [17:0] axi_open_loop_bias_sig;  // sfix18_En14
  wire signed [17:0] axi_open_loop_scalar_sig;  // sfix18_En16
  wire signed [17:0] axi_encoder_zero_offset_sig;  // sfix18_En14
  wire ce_out_0_sig;  // ufix1
  wire ce_out_1_sig;  // ufix1
  wire pwm_a_sig;  // ufix1
  wire pwm_b_sig;  // ufix1
  wire pwm_c_sig;  // ufix1
  wire signed [31:0] mon_phase_voltage_a_sig;  // sfix32
  wire signed [31:0] mon_phase_voltage_b_sig;  // sfix32
  wire signed [31:0] mon_phase_current_a_sig;  // sfix32
  wire signed [31:0] mon_phase_current_b_sig;  // sfix32
  wire signed [31:0] mon_rotor_position_sig;  // sfix32
  wire signed [31:0] mon_electrical_position_sig;  // sfix32
  wire signed [31:0] mon_rotor_velocity_sig;  // sfix32
  wire signed [31:0] mon_d_current_sig;  // sfix32
  wire signed [31:0] mon_q_current_sig;  // sfix32


  assign reset_cm =  ~ IPCORE_RESETN;



  assign reset = reset_cm | reset_internal;



  controllerperipheralhdladi_pcore_axi_lite   u_controllerperipheralhdladi_pcore_axi_lite_inst   (.reset(reset),
                                                                                                  .AXI_Lite_ACLK(s_axi_aclk),  // ufix1
                                                                                                  .AXI_Lite_ARESETN(s_axi_aresetn),  // ufix1
                                                                                                  .AXI_Lite_AWADDR(s_axi_awaddr),  // ufix32
                                                                                                  .AXI_Lite_AWVALID(s_axi_awvalid),  // ufix1
                                                                                                  .AXI_Lite_WDATA(s_axi_wdata),  // ufix32
                                                                                                  .AXI_Lite_WSTRB(s_axi_wstrb),  // ufix4
                                                                                                  .AXI_Lite_WVALID(s_axi_wvalid),  // ufix1
                                                                                                  .AXI_Lite_BREADY(s_axi_bready),  // ufix1
                                                                                                  .AXI_Lite_ARADDR(s_axi_araddr),  // ufix32
                                                                                                  .AXI_Lite_ARVALID(s_axi_arvalid),  // ufix1
                                                                                                  .AXI_Lite_RREADY(s_axi_rready),  // ufix1
                                                                                                  .read_axi_electrical_pos_err(axi_electrical_pos_err_sig),  // sfix19_En14
                                                                                                  .AXI_Lite_AWREADY(s_axi_awready),  // ufix1
                                                                                                  .AXI_Lite_WREADY(s_axi_wready),  // ufix1
                                                                                                  .AXI_Lite_BRESP(s_axi_bresp),  // ufix2
                                                                                                  .AXI_Lite_BVALID(s_axi_bvalid),  // ufix1
                                                                                                  .AXI_Lite_ARREADY(s_axi_arready),  // ufix1
                                                                                                  .AXI_Lite_RDATA(s_axi_rdata),  // ufix32
                                                                                                  .AXI_Lite_RRESP(s_axi_rresp),  // ufix2
                                                                                                  .AXI_Lite_RVALID(s_axi_rvalid),  // ufix1
                                                                                                  .write_axi_enable(dut_enable),  // ufix1
                                                                                                  .write_axi_controller_mode(axi_controller_mode_sig),  // ufix2
                                                                                                  .write_axi_command(axi_command_sig),  // sfix18_En8
                                                                                                  .write_axi_velocity_p_gain(axi_velocity_p_gain_sig),  // sfix18_En16
                                                                                                  .write_axi_velocity_i_gain(axi_velocity_i_gain_sig),  // sfix18_En15
                                                                                                  .write_axi_current_p_gain(axi_current_p_gain_sig),  // sfix18_En10
                                                                                                  .write_axi_current_i_gain(axi_current_i_gain_sig),  // sfix18_En2
                                                                                                  .write_axi_open_loop_bias(axi_open_loop_bias_sig),  // sfix18_En14
                                                                                                  .write_axi_open_loop_scalar(axi_open_loop_scalar_sig),  // sfix18_En16
                                                                                                  .write_axi_encoder_zero_offset(axi_encoder_zero_offset_sig),  // sfix18_En14
                                                                                                  .reset_internal(reset_internal)  // ufix1
                                                                                                  );

  controllerperipheralhdladi_pcore_dut   u_controllerperipheralhdladi_pcore_dut_inst   (.CLK_IN(IPCORE_CLK),  // ufix1
                                                                                        .reset(reset),
                                                                                        .dut_enable(dut_enable),  // ufix1
                                                                                        .adc_current1(adc_current1),  // sfix18_En17
                                                                                        .adc_current2(adc_current2),  // sfix18_En17
                                                                                        .encoder_a(encoder_a),  // ufix1
                                                                                        .encoder_b(encoder_b),  // ufix1
                                                                                        .encoder_index(encoder_index),  // ufix1
                                                                                        .axi_controller_mode(axi_controller_mode_sig),  // ufix2
                                                                                        .axi_command(axi_command_sig),  // sfix18_En8
                                                                                        .axi_velocity_p_gain(axi_velocity_p_gain_sig),  // sfix18_En16
                                                                                        .axi_velocity_i_gain(axi_velocity_i_gain_sig),  // sfix18_En15
                                                                                        .axi_current_p_gain(axi_current_p_gain_sig),  // sfix18_En10
                                                                                        .axi_current_i_gain(axi_current_i_gain_sig),  // sfix18_En2
                                                                                        .axi_open_loop_bias(axi_open_loop_bias_sig),  // sfix18_En14
                                                                                        .axi_open_loop_scalar(axi_open_loop_scalar_sig),  // sfix18_En16
                                                                                        .axi_encoder_zero_offset(axi_encoder_zero_offset_sig),  // sfix18_En14
                                                                                        .ce_out_0(ce_out_0_sig),  // ufix1
                                                                                        .ce_out_1(ce_out_1_sig),  // ufix1
                                                                                        .pwm_a(pwm_a_sig),  // ufix1
                                                                                        .pwm_b(pwm_b_sig),  // ufix1
                                                                                        .pwm_c(pwm_c_sig),  // ufix1
                                                                                        .mon_phase_voltage_a(mon_phase_voltage_a_sig),  // sfix32
                                                                                        .mon_phase_voltage_b(mon_phase_voltage_b_sig),  // sfix32
                                                                                        .mon_phase_current_a(mon_phase_current_a_sig),  // sfix32
                                                                                        .mon_phase_current_b(mon_phase_current_b_sig),  // sfix32
                                                                                        .mon_rotor_position(mon_rotor_position_sig),  // sfix32
                                                                                        .mon_electrical_position(mon_electrical_position_sig),  // sfix32
                                                                                        .mon_rotor_velocity(mon_rotor_velocity_sig),  // sfix32
                                                                                        .mon_d_current(mon_d_current_sig),  // sfix32
                                                                                        .mon_q_current(mon_q_current_sig),  // sfix32
                                                                                        .axi_electrical_pos_err(axi_electrical_pos_err_sig)  // sfix19_En14
                                                                                        );

  assign pwm_a = pwm_a_sig;

  assign pwm_b = pwm_b_sig;

  assign pwm_c = pwm_c_sig;

  assign mon_phase_voltage_a = mon_phase_voltage_a_sig;

  assign mon_phase_voltage_b = mon_phase_voltage_b_sig;

  assign mon_phase_current_a = mon_phase_current_a_sig;

  assign mon_phase_current_b = mon_phase_current_b_sig;

  assign mon_rotor_position = mon_rotor_position_sig;

  assign mon_electrical_position = mon_electrical_position_sig;

  assign mon_rotor_velocity = mon_rotor_velocity_sig;

  assign mon_d_current = mon_d_current_sig;

  assign mon_q_current = mon_q_current_sig;

endmodule  // controllerperipheralhdladi_pcore

