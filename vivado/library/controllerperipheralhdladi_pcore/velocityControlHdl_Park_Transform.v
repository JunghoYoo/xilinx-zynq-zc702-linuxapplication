// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\velocityControlHdl\velocityControlHdl_Park_Transform.v
// Created: 2014-08-25 21:11:09
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: velocityControlHdl_Park_Transform
// Source Path: velocityControlHdl/Transform_ABC_to_dq/Park_Transform
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module velocityControlHdl_Park_Transform
          (
           sin_coefficient,
           cos_coefficient,
           alpha_current,
           beta_current,
           direct_current,
           quadrature_current
          );


  input   signed [17:0] sin_coefficient;  // sfix18_En16
  input   signed [17:0] cos_coefficient;  // sfix18_En16
  input   signed [17:0] alpha_current;  // sfix18_En13
  input   signed [17:0] beta_current;  // sfix18_En13
  output  signed [17:0] direct_current;  // sfix18_En15
  output  signed [17:0] quadrature_current;  // sfix18_En15


  wire signed [35:0] Product2_out1;  // sfix36_En29
  wire signed [35:0] Product3_out1;  // sfix36_En29
  wire signed [35:0] Add1_out1;  // sfix36_En29
  wire signed [17:0] D_Data_Type_out1;  // sfix18_En15
  wire signed [35:0] Product1_out1;  // sfix36_En29
  wire signed [35:0] Product_out1;  // sfix36_En29
  wire signed [35:0] Add_out1;  // sfix36_En29
  wire signed [17:0] Q_Data_Type_out1;  // sfix18_En15

  // Converts balanced two-phase orthogonal stationary system to an orthogonal rotating reference frame.
  // 
  // Park Transform


  // <S42>/Product2
  assign Product2_out1 = alpha_current * cos_coefficient;



  // <S42>/Product3
  assign Product3_out1 = beta_current * sin_coefficient;



  // <S42>/Add1
  assign Add1_out1 = Product2_out1 + Product3_out1;



  // <S42>/D_Data_Type
  assign D_Data_Type_out1 = ((Add1_out1[35] == 1'b0) && (Add1_out1[34:31] != 4'b0000) ? 18'sb011111111111111111 :
              ((Add1_out1[35] == 1'b1) && (Add1_out1[34:31] != 4'b1111) ? 18'sb100000000000000000 :
              $signed(Add1_out1[31:14])));



  assign direct_current = D_Data_Type_out1;

  // <S42>/Product1
  assign Product1_out1 = beta_current * cos_coefficient;



  // <S42>/Product
  assign Product_out1 = alpha_current * sin_coefficient;



  // <S42>/Add
  assign Add_out1 = Product1_out1 - Product_out1;



  // <S42>/Q_Data_Type
  assign Q_Data_Type_out1 = ((Add_out1[35] == 1'b0) && (Add_out1[34:31] != 4'b0000) ? 18'sb011111111111111111 :
              ((Add_out1[35] == 1'b1) && (Add_out1[34:31] != 4'b1111) ? 18'sb100000000000000000 :
              $signed(Add_out1[31:14])));



  assign quadrature_current = Q_Data_Type_out1;

endmodule  // velocityControlHdl_Park_Transform

