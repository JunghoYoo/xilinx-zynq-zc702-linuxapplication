// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\Encoder_Peripheral_Hardware_Specification.v
// Created: 2014-09-08 14:12:09
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Encoder_Peripheral_Hardware_Specification
// Source Path: controllerPeripheralHdlAdi/Encoder_Peripheral_Hardware_Specification
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Encoder_Peripheral_Hardware_Specification
          (
           CLK_IN,
           reset,
           enb,
           a,
           b,
           index,
           valid,
           count
          );


  input   CLK_IN;
  input   reset;
  input   enb;
  input   a;
  input   b;
  input   index;
  output  valid;
  output  [15:0] count;  // uint16


  wire y;
  wire Latch_Index_Pulse_out1;
  wire Select_AB_Inputs_out1;
  wire y_1;
  wire y_2;
  wire Select_AB_out1;
  wire Select_AB_out2;
  wire Detect_Change_To_One_out1;
  wire signed [15:0] Counter_Max_out1;  // int16
  wire signed [15:0] Update_Count_From_AB_out1;  // int16
  wire [15:0] Data_Type_Conversion_out1;  // uint16


  // <S1>/Debounce_Index
  Debounce_Index   u_Debounce_Index   (.CLK_IN(CLK_IN),
                                       .reset(reset),
                                       .enb(enb),
                                       .In(index),
                                       .Out(y)
                                       );

  // <S1>/Latch_Index_Pulse
  Latch_Index_Pulse   u_Latch_Index_Pulse   (.CLK_IN(CLK_IN),
                                             .reset(reset),
                                             .enb(enb),
                                             .In1(y),
                                             .Out1(Latch_Index_Pulse_out1)
                                             );

  assign valid = Latch_Index_Pulse_out1;

  // <S1>/Select_AB_Inputs
  assign Select_AB_Inputs_out1 = 1'b0;



  // <S1>/Debounce_A
  Debounce_A   u_Debounce_A   (.CLK_IN(CLK_IN),
                               .reset(reset),
                               .enb(enb),
                               .In(a),
                               .Out(y_1)
                               );

  // <S1>/Debounce_B
  Debounce_B   u_Debounce_B   (.CLK_IN(CLK_IN),
                               .reset(reset),
                               .enb(enb),
                               .In(b),
                               .Out(y_2)
                               );

  // <S1>/Select AB
  Select_AB   u_Select_AB   (.in_select(Select_AB_Inputs_out1),
                             .in1(y_1),
                             .in2(y_2),
                             .A(Select_AB_out1),
                             .B(Select_AB_out2)
                             );

  // <S1>/Detect Change To One
  Detect_Change_To_One   u_Detect_Change_To_One   (.CLK_IN(CLK_IN),
                                                   .reset(reset),
                                                   .enb(enb),
                                                   .In1(y),
                                                   .Out1(Detect_Change_To_One_out1)
                                                   );

  // <S1>/Counter_Max
  assign Counter_Max_out1 = 16'sd4999;



  // <S1>/Update_Count_From_AB
  Update_Count_From_AB   u_Update_Count_From_AB   (.CLK_IN(CLK_IN),
                                                   .reset(reset),
                                                   .enb(enb),
                                                   .A(Select_AB_out1),
                                                   .B(Select_AB_out2),
                                                   .index(Detect_Change_To_One_out1),
                                                   .count_max(Counter_Max_out1),  // int16
                                                   .count(Update_Count_From_AB_out1)  // int16
                                                   );

  // <S1>/Data Type Conversion
  assign Data_Type_Conversion_out1 = Update_Count_From_AB_out1;



  assign count = Data_Type_Conversion_out1;

endmodule  // Encoder_Peripheral_Hardware_Specification

