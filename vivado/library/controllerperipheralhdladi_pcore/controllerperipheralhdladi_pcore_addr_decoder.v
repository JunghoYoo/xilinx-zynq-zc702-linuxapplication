// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\controllerperipheralhdladi_pcore_addr_decoder.v
// Created: 2014-09-08 14:12:15
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: controllerperipheralhdladi_pcore_addr_decoder
// Source Path: controllerperipheralhdladi_pcore/controllerperipheralhdladi_pcore_axi_lite/controllerperipheralhdladi_pcore_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module controllerperipheralhdladi_pcore_addr_decoder
          (
           CLK_IN,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_axi_electrical_pos_err,
           data_read,
           write_axi_enable,
           write_axi_controller_mode,
           write_axi_command,
           write_axi_velocity_p_gain,
           write_axi_velocity_i_gain,
           write_axi_current_p_gain,
           write_axi_current_i_gain,
           write_axi_open_loop_bias,
           write_axi_open_loop_scalar,
           write_axi_encoder_zero_offset
          );


  input   CLK_IN;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   signed [18:0] read_axi_electrical_pos_err;  // sfix19_En14
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [1:0] write_axi_controller_mode;  // ufix2
  output  signed [17:0] write_axi_command;  // sfix18_En8
  output  signed [17:0] write_axi_velocity_p_gain;  // sfix18_En16
  output  signed [17:0] write_axi_velocity_i_gain;  // sfix18_En15
  output  signed [17:0] write_axi_current_p_gain;  // sfix18_En10
  output  signed [17:0] write_axi_current_i_gain;  // sfix18_En2
  output  signed [17:0] write_axi_open_loop_bias;  // sfix18_En14
  output  signed [17:0] write_axi_open_loop_scalar;  // sfix18_En16
  output  signed [17:0] write_axi_encoder_zero_offset;  // sfix18_En14


  wire enb;
  wire decode_sel_axi_electrical_pos_err;  // ufix1
  wire const_1;  // ufix1
  wire [31:0] const_z;  // ufix32
  reg signed [18:0] read_reg_axi_electrical_pos_err;  // sfix19_En14
  wire [31:0] data_in_axi_electrical_pos_err;  // ufix32
  wire [31:0] decode_rd_axi_electrical_pos_err;  // ufix32
  wire data_in_axi_enable;  // ufix1
  wire decode_sel_axi_enable;  // ufix1
  wire reg_enb_axi_enable;  // ufix1
  reg  write_reg_axi_enable;  // ufix1
  wire [1:0] data_in_axi_controller_mode;  // ufix2
  wire decode_sel_axi_controller_mode;  // ufix1
  wire reg_enb_axi_controller_mode;  // ufix1
  reg [1:0] write_reg_axi_controller_mode;  // ufix2
  wire signed [17:0] data_in_axi_command;  // sfix18_En8
  wire decode_sel_axi_command;  // ufix1
  wire reg_enb_axi_command;  // ufix1
  reg signed [17:0] write_reg_axi_command;  // sfix18_En8
  wire signed [17:0] data_in_axi_velocity_p_gain;  // sfix18_En16
  wire decode_sel_axi_velocity_p_gain;  // ufix1
  wire reg_enb_axi_velocity_p_gain;  // ufix1
  reg signed [17:0] write_reg_axi_velocity_p_gain;  // sfix18_En16
  wire signed [17:0] data_in_axi_velocity_i_gain;  // sfix18_En15
  wire decode_sel_axi_velocity_i_gain;  // ufix1
  wire reg_enb_axi_velocity_i_gain;  // ufix1
  reg signed [17:0] write_reg_axi_velocity_i_gain;  // sfix18_En15
  wire signed [17:0] data_in_axi_current_p_gain;  // sfix18_En10
  wire decode_sel_axi_current_p_gain;  // ufix1
  wire reg_enb_axi_current_p_gain;  // ufix1
  reg signed [17:0] write_reg_axi_current_p_gain;  // sfix18_En10
  wire signed [17:0] data_in_axi_current_i_gain;  // sfix18_En2
  wire decode_sel_axi_current_i_gain;  // ufix1
  wire reg_enb_axi_current_i_gain;  // ufix1
  reg signed [17:0] write_reg_axi_current_i_gain;  // sfix18_En2
  wire signed [17:0] data_in_axi_open_loop_bias;  // sfix18_En14
  wire decode_sel_axi_open_loop_bias;  // ufix1
  wire reg_enb_axi_open_loop_bias;  // ufix1
  reg signed [17:0] write_reg_axi_open_loop_bias;  // sfix18_En14
  wire signed [17:0] data_in_axi_open_loop_scalar;  // sfix18_En16
  wire decode_sel_axi_open_loop_scalar;  // ufix1
  wire reg_enb_axi_open_loop_scalar;  // ufix1
  reg signed [17:0] write_reg_axi_open_loop_scalar;  // sfix18_En16
  wire signed [17:0] data_in_axi_encoder_zero_offset;  // sfix18_En14
  wire decode_sel_axi_encoder_zero_offset;  // ufix1
  wire reg_enb_axi_encoder_zero_offset;  // ufix1
  reg signed [17:0] write_reg_axi_encoder_zero_offset;  // sfix18_En14


  assign decode_sel_axi_electrical_pos_err = (addr_sel == 14'b00000001001001 ? 1'b1 :
              1'b0);



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign const_z = 32'bz;


  always @(posedge CLK_IN)
    begin : reg_axi_electrical_pos_err_process
      if (reset == 1'b1) begin
        read_reg_axi_electrical_pos_err <= 19'sb0000000000000000000;
      end
      else if (enb) begin
        read_reg_axi_electrical_pos_err <= read_axi_electrical_pos_err;
      end
    end



  assign data_in_axi_electrical_pos_err = {{13{read_reg_axi_electrical_pos_err[18]}}, read_reg_axi_electrical_pos_err};



  assign decode_rd_axi_electrical_pos_err = (decode_sel_axi_electrical_pos_err == 1'b0 ? const_z :
              data_in_axi_electrical_pos_err);



  assign data_read = decode_rd_axi_electrical_pos_err;

  assign data_in_axi_enable = data_write[0];



  assign decode_sel_axi_enable = (addr_sel == 14'b00000000000001 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_enable = decode_sel_axi_enable & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_enable_process
      if (reset == 1'b1) begin
        write_reg_axi_enable <= 1'b1;
      end
      else if (enb && reg_enb_axi_enable) begin
        write_reg_axi_enable <= data_in_axi_enable;
      end
    end



  assign write_axi_enable = write_reg_axi_enable;

  assign data_in_axi_controller_mode = data_write[1:0];



  assign decode_sel_axi_controller_mode = (addr_sel == 14'b00000001000000 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_controller_mode = decode_sel_axi_controller_mode & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_controller_mode_process
      if (reset == 1'b1) begin
        write_reg_axi_controller_mode <= 2'b00;
      end
      else if (enb && reg_enb_axi_controller_mode) begin
        write_reg_axi_controller_mode <= data_in_axi_controller_mode;
      end
    end



  assign write_axi_controller_mode = write_reg_axi_controller_mode;

  assign data_in_axi_command = $signed(data_write[17:0]);



  assign decode_sel_axi_command = (addr_sel == 14'b00000001000001 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_command = decode_sel_axi_command & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_command_process
      if (reset == 1'b1) begin
        write_reg_axi_command <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_command) begin
        write_reg_axi_command <= data_in_axi_command;
      end
    end



  assign write_axi_command = write_reg_axi_command;

  assign data_in_axi_velocity_p_gain = $signed(data_write[17:0]);



  assign decode_sel_axi_velocity_p_gain = (addr_sel == 14'b00000001000010 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_velocity_p_gain = decode_sel_axi_velocity_p_gain & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_velocity_p_gain_process
      if (reset == 1'b1) begin
        write_reg_axi_velocity_p_gain <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_velocity_p_gain) begin
        write_reg_axi_velocity_p_gain <= data_in_axi_velocity_p_gain;
      end
    end



  assign write_axi_velocity_p_gain = write_reg_axi_velocity_p_gain;

  assign data_in_axi_velocity_i_gain = $signed(data_write[17:0]);



  assign decode_sel_axi_velocity_i_gain = (addr_sel == 14'b00000001000011 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_velocity_i_gain = decode_sel_axi_velocity_i_gain & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_velocity_i_gain_process
      if (reset == 1'b1) begin
        write_reg_axi_velocity_i_gain <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_velocity_i_gain) begin
        write_reg_axi_velocity_i_gain <= data_in_axi_velocity_i_gain;
      end
    end



  assign write_axi_velocity_i_gain = write_reg_axi_velocity_i_gain;

  assign data_in_axi_current_p_gain = $signed(data_write[17:0]);



  assign decode_sel_axi_current_p_gain = (addr_sel == 14'b00000001000100 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_current_p_gain = decode_sel_axi_current_p_gain & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_current_p_gain_process
      if (reset == 1'b1) begin
        write_reg_axi_current_p_gain <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_current_p_gain) begin
        write_reg_axi_current_p_gain <= data_in_axi_current_p_gain;
      end
    end



  assign write_axi_current_p_gain = write_reg_axi_current_p_gain;

  assign data_in_axi_current_i_gain = $signed(data_write[17:0]);



  assign decode_sel_axi_current_i_gain = (addr_sel == 14'b00000001000101 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_current_i_gain = decode_sel_axi_current_i_gain & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_current_i_gain_process
      if (reset == 1'b1) begin
        write_reg_axi_current_i_gain <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_current_i_gain) begin
        write_reg_axi_current_i_gain <= data_in_axi_current_i_gain;
      end
    end



  assign write_axi_current_i_gain = write_reg_axi_current_i_gain;

  assign data_in_axi_open_loop_bias = $signed(data_write[17:0]);



  assign decode_sel_axi_open_loop_bias = (addr_sel == 14'b00000001000110 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_open_loop_bias = decode_sel_axi_open_loop_bias & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_open_loop_bias_process
      if (reset == 1'b1) begin
        write_reg_axi_open_loop_bias <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_open_loop_bias) begin
        write_reg_axi_open_loop_bias <= data_in_axi_open_loop_bias;
      end
    end



  assign write_axi_open_loop_bias = write_reg_axi_open_loop_bias;

  assign data_in_axi_open_loop_scalar = $signed(data_write[17:0]);



  assign decode_sel_axi_open_loop_scalar = (addr_sel == 14'b00000001000111 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_open_loop_scalar = decode_sel_axi_open_loop_scalar & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_open_loop_scalar_process
      if (reset == 1'b1) begin
        write_reg_axi_open_loop_scalar <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_open_loop_scalar) begin
        write_reg_axi_open_loop_scalar <= data_in_axi_open_loop_scalar;
      end
    end



  assign write_axi_open_loop_scalar = write_reg_axi_open_loop_scalar;

  assign data_in_axi_encoder_zero_offset = $signed(data_write[17:0]);



  assign decode_sel_axi_encoder_zero_offset = (addr_sel == 14'b00000001001000 ? 1'b1 :
              1'b0);



  assign reg_enb_axi_encoder_zero_offset = decode_sel_axi_encoder_zero_offset & wr_enb;



  always @(posedge CLK_IN)
    begin : reg_axi_encoder_zero_offset_process
      if (reset == 1'b1) begin
        write_reg_axi_encoder_zero_offset <= 18'sb000000000000000000;
      end
      else if (enb && reg_enb_axi_encoder_zero_offset) begin
        write_reg_axi_encoder_zero_offset <= data_in_axi_encoder_zero_offset;
      end
    end



  assign write_axi_encoder_zero_offset = write_reg_axi_encoder_zero_offset;

endmodule  // controllerperipheralhdladi_pcore_addr_decoder

