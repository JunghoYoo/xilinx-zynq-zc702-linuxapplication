// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\controllerPeripheralHdlAdi\controllerHdl\controllerHdl_Calculate_Rotor_Velocity.v
// Created: 2014-09-08 14:12:04
// 
// Generated by MATLAB 8.2 and HDL Coder 3.3
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: controllerHdl_Calculate_Rotor_Velocity
// Source Path: controllerHdl/Encoder_To_Position_And_Velocity/Calculate_Rotor_Velocity
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module controllerHdl_Calculate_Rotor_Velocity
          (
           CLK_IN,
           reset,
           enb_1_2000_0,
           valid,
           position,
           rotor_velocity
          );


  input   CLK_IN;
  input   reset;
  input   enb_1_2000_0;
  input   valid;
  input   signed [17:0] position;  // sfix18_En14
  output  signed [17:0] rotor_velocity;  // sfix18_En8


  reg signed [17:0] Delay1_out1;  // sfix18_En14
  wire signed [18:0] Add_sub_cast;  // sfix19_En14
  wire signed [18:0] Add_sub_cast_1;  // sfix19_En14
  wire signed [18:0] Add_out1;  // sfix19_En14
  wire signed [17:0] position_delta;  // sfix18_En15
  wire [17:0] time_delta_1;  // ufix18_En3
  wire signed [18:0] Product_cast;  // sfix19_En3
  wire signed [36:0] Product_mul_temp;  // sfix37_En18
  wire signed [35:0] velocity;  // sfix36_En18
  wire signed [17:0] Data_Type_Conversion2_out1;  // sfix18_En8
  wire signed [17:0] Constant1_out1;  // sfix18_En8
  wire signed [35:0] Product1_out1;  // sfix36_En16
  wire signed [17:0] Constant2_out1;  // sfix18_En8
  wire signed [17:0] Data_Type_Conversion1_out1;  // sfix18_En8
  reg signed [17:0] Delay4_out1;  // sfix18_En8
  wire signed [35:0] Product2_out1;  // sfix36_En16
  wire signed [36:0] Add1_add_cast;  // sfix37_En16
  wire signed [36:0] Add1_add_cast_1;  // sfix37_En16
  wire signed [36:0] Add1_out1;  // sfix37_En16

  // First two velocity calculations are not valid
  // 
  // If detect positive rise in valid, this is a bad sample
  // since encoder index just reset. In this case hold the last value
  // 
  // Calculate Velocity


  // <S6>/Delay1
  always @(posedge CLK_IN)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 18'sb000000000000000000;
      end
      else if (enb_1_2000_0) begin
        Delay1_out1 <= position;
      end
    end



  // <S6>/Add
  assign Add_sub_cast = position;
  assign Add_sub_cast_1 = Delay1_out1;
  assign Add_out1 = Add_sub_cast - Add_sub_cast_1;



  // <S6>/Wrap_NegPi_To_Pi
  controllerHdl_Wrap_NegPi_To_Pi   u_Wrap_NegPi_To_Pi   (.position(Add_out1),  // sfix19_En14
                                                         .wrap(position_delta)  // sfix18_En15
                                                         );

  // <S6>/Time_Delta
  assign time_delta_1 = 18'b110000110101000000;



  // <S6>/Product
  // 
  // <S6>/Switch
  // 
  // <S6>/Delay
  assign Product_cast = time_delta_1;
  assign Product_mul_temp = position_delta * Product_cast;
  assign velocity = Product_mul_temp[35:0];



  // <S6>/Data Type Conversion2
  assign Data_Type_Conversion2_out1 = velocity[27:10];



  // <S6>/Constant1
  assign Constant1_out1 = 18'sb000000000000000010;



  // <S6>/Product1
  assign Product1_out1 = Data_Type_Conversion2_out1 * Constant1_out1;



  // <S6>/Constant2
  assign Constant2_out1 = 18'sb000000000011111110;



  // <S6>/Delay4
  // 
  // <S6>/Delay3
  // 
  // <S6>/Detect_Rise
  always @(posedge CLK_IN)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 18'sb000000000000000000;
      end
      else if (enb_1_2000_0) begin
        Delay4_out1 <= Data_Type_Conversion1_out1;
      end
    end



  // <S6>/Product2
  assign Product2_out1 = Constant2_out1 * Delay4_out1;



  // <S6>/Add1
  assign Add1_add_cast = Product1_out1;
  assign Add1_add_cast_1 = Product2_out1;
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;



  // <S6>/Data Type Conversion1
  assign Data_Type_Conversion1_out1 = Add1_out1[25:8];



  assign rotor_velocity = Data_Type_Conversion1_out1;

endmodule  // controllerHdl_Calculate_Rotor_Velocity

